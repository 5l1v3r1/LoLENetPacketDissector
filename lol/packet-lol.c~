#include "config.h"

#include <epan/packet.h>

#define LoL_PORT 1234
//9.11
#define LoL_START_FLAG 0x01
#define LoL_END_FLAG 0x02
#define LoL_PRIORITY_FLAG 0x04

static int proto_foo = -1;
static int hf_lol_pdu_type = -1;
static gint ett_lol = -1;

//9.8 additions
static int hf_lol_flags = -1;
static int hf_lol_sequenceno = -1;
static int hf_lol_initialip = -1;

//9.11
static int hf_lol_startflag = -1;
static int hf_lol_endflag = -1;
static int hf_lol_priorityflag = -1;

//9.9 - have to find out how enet works with this
static const value_string packettypenames[] = {
	{ 1, "Initialise" },
	{ 2, "Terminate" },
	{ 3, "Data" },
	{ 0, NULL }
};

static void dissect_lol(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree)
{

	gint offset = 0;
	guint8 packet_type = tvb_get_guint8(tvb, 0);

	col_set_str(pinfo->cinfo, COL_PROTOCOL, "LoL");
	/*Clear out info column*/
	col_clear(pinfo->cinfo,COL_INFO);
	col_add_fstr(pinfo->cinfo, COL_INFO, "Type %s",
		val_to_str(packet_type, packettypenames, "Unknown (0x%02x)"));

	//build a subtree to decode results into
	//one case it gets a summary, and the other it looks at details
	//distinguished by a tree pointer, if null then summary
	if (tree) { /* we are being asked for details */
		proto_item *ti = NULL;
		proto_tree *lol_tree = NULL;
		gint offset = 0;


		ti = proto_tree_add_item(tree, proto_lol, tvb, 0, -1, 
			ENC_NA);
		proto_item_append_text(ti, ", Type %s",
			val_to_str(packet_type, packettypenames, "Unknown (0x%02x)"));
		//adding new tree node to passedin tree, labeling it,
		//use passed in tvb as data, and consume from 0 to end
		//ENC_NA is encoding param

		//adds a child node to protocol tree
		//expansion controlled by ett_lol
		//subsequent dissection added to this tree
		lol_tree = proto_item_add_subtree(ti,ett_lol);
		//pdu type is one byte of data starting at 0
		//assume network order (bigend)
		//9.11 added flag part
		proto_tree_add_item(lol_tree, hf_lol_pdu_type,  tvb, offset, 1,
			ENC_BIG_ENDIAN);
		offset += 1; //1
		proto_tree_add_item(lol_tree, hf_lol_flags  tvb, offset, 1,
			ENC_BIG_ENDIAN);
		proto_tree_add_item(lol_tree, hf_lol_startflag, tvb, offset, 1,
			ENC_BIG_ENDIAN);
		proto_tree_add_item(lol_tree, hf_lol_endflag, tvb, offset, 1,
			ENC_BIG_ENDIAN);
		proto_tree_add_item(lol_tree, hf_lol_priorityflag, tvb, offset, 1,
			ENC_BIG_ENDIAN);
		offset += 1; //2
		proto_tree_add_item(lol_tree, hf_lol_sequenceno,  tvb, offset,
		 2, ENC_BIG_ENDIAN);
		offset += 2; //4
		proto_tree_add_item(lol_tree, hf_lol_initialip,  tvb, offset, 4,
			ENC_BIG_ENDIAN);
		offset += 1; //5


	}

}
void proto_register_lol(void)
{
	//2 statically allocated arrays added 

	//index, label, filter stringer, 8bit unsigned int (corresponds with
	//one byte look), print as decimal number (can be base_hex or oct
	// if needed)
	static hf_register_info hf[] = {
		{ &hf_lol_pdu_type,
			{ "LoL PDU Type", "lol.type", 
			FT_UINT8, BASE_DEC, VALS(packettypenames),
			0x0, NULL, HFILL }
		},

		{ &hf_lol_flags,
			{ "LoL PDU Flags", "lol.flags", FT_UINT8,
			base_hex, NULL, 0x0, NULL, HFILL}
		},

		//boolean because flag is on or off
		//flag mask in 7th field, masks relevant bit
		//8 bit quantity when flags extracted
		//same offset must be kept for each flag
		{ &hf_lol_startflag,
			{ "LoL PDU Start Flags", "lol.flags.start", FT_BOOLEAN,
			8, NULL, LoL_START_FLAG, NULL, HFILL}
		},

		{ &hf_lol_endflag,
			{ "LoL PDU End Flags", "lol.flags.end", FT_BOOLEAN,
			8, NULL, LoL_END_FLAG, NULL, HFILL}
		},

		{ &hf_lol_priorityflag,
			{ "LoL PDU Priority Flags", "lol.flags.priority", FT_BOOLEAN,
			8, NULL, LoL_PRIORITY_FLAG, NULL, HFILL}
		},

		{ &hf_lol_sequenceno,
			{ "LoL PDU Sequence Number", "lol.seqn",
			FT_UINT16, BASE_DEC, NULL, 0x0, NULL, HFILL}
		},

		{ &hf_lol_initialip,
			{ "LoL PDU Initial IP", "lol.initialip",
			FT_IPv4, BASE_NONE, NULL, 0x0, NULL, HFILL}
		}
	};

	/*protocol subtree array */
	static gint *ett[] = {
		&ett_lol
	};

	proto_lol = proto_register_protocol (
	"LoL Protocol", /*name*/
	"LoL",			/*short name*/
	"lol"			/*abbrev */
	);

	proto_register_field_array(proto_lol, hf, array_length(hf));
	proto_register_subtree_array(ett, array_length(ett));
}

void proto_reg_handoff_lol(void)
{
	static dissector_handle_t lol_handle;

	lol_handle = create_dissector_handle(dissect_lol,proto_lol);
	dissector_add_uint("udp.port", LoL_PORT, lol_handle);
}